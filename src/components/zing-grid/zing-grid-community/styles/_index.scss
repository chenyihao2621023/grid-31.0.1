
//
// This file defines the public Sass API to zing-Grid's styles.
// https://zing-grid.com/javascript-data-grid/global-style-customisation-sass/
//

@use "sass:map";
@use "sass:list";
@use "sass:meta";
@use "sass:string";
@use "sass:color";
@use "sass:math";
@use "./css-content";
@use "./icon-font-codes" as *;

@forward "./shared";

// Emit styles for the grid. This mixin validates the parameters passed to it,
// converts the parameters to CSS variables, and combines all the necessary CSS
// files for the grid and selected theme.
@mixin grid-styles($global-params: ()) {
    $no-native-widgets: map.get($global-params, "suppress-native-widget-styling");
    $global-params: map.remove($global-params, "suppress-native-widget-styling");

    $themes: -get-themes($global-params);

    @if $no-native-widgets {
        @include -load-css-file("zing-grid-no-native-widgets.css");
    } @else {
        @include -load-css-file("zing-grid.css");
    }

    $global-extended-theme-name: -clean-theme-name(map.get($global-params, "extend-theme"));

    @each $theme-name, $theme-params in $themes {
        @include -validate-params($theme-params, $theme-name);

        @include -load-theme-css-file($theme-name);
        $extended-theme-name: -get-extended-theme-name($theme-params, $default: $global-extended-theme-name);
        @if $extended-theme-name and not -is-provided-theme($extended-theme-name) {
            @error "Invalid extend-theme: \"#{$extended-theme-name}\": only provided themes can be extended, use one of #{meta.inspect(map.keys($-theme-css-files))}";
        }
        @if $extended-theme-name and -is-provided-theme($theme-name) {
            @error "Can't use a provided theme (#{$theme-name}) and also extend a provided theme (#{$extended-theme-name}). If you want to extend #{$extended-theme-name}, provide your own custom theme name.";
        }
        @if $extended-theme-name {
            @include -load-theme-css-file($extended-theme-name);
        }

        $font: map.get($theme-params, "--zing-icon-font-family");
        $font: map.get($-theme-fonts, $theme-name) !default;
        $font: map.get($-theme-fonts, $extended-theme-name) !default;
        @if $font {
            @include -load-css-file("#{$font}Font.css", $ignore-missing: true);
        }
    }

    @each $theme-name, $theme-params in $themes {
        $extended-theme-name: -get-extended-theme-name($theme-params, $default: $global-extended-theme-name);

        @if $extended-theme-name and $extended-theme-name != $theme-name {
            // alias all the styles in the extended theme to the new theme name
            .zing-theme-#{$theme-name} {
                @extend .zing-theme-#{$extended-theme-name};
            }
        }

        // Emit CSS variable declarations for a set of params, converting (foo: bar) to `--zing-foo: bar`
        .zing-theme-#{$theme-name} {
            $color-blend-theme-name: $extended-theme-name;
            $color-blend-theme-name: $theme-name !default;
            $blend-function-name: "-theme-#{$color-blend-theme-name}-color-blends";
            @if meta.function-exists($blend-function-name) {
                $theme-color-blends: meta.get-function($blend-function-name);
                $theme-params: meta.call($theme-color-blends, $theme-params);
            }
            @if (not -is-quartz($theme-name) and not -is-quartz($extended-theme-name)) {
                $theme-params: -base-color-blends($theme-params);
            }
        
            @each $name, $value in $theme-params {
                // use meta.inspect to preserve the quote style of strings
                @if map.has-key($-variable-param-types, $name) {
                    #{$name}: #{meta.inspect($value)};
                }
            }
        }
    }
}

//
// PRIVATE IMPLEMENTATION
//

$-loaded-css-files: ();

// Fulfils the same role as meta.load-css, which we can't use due to this issue:
// https://github.com/sass/dart-sass/issues/1627
//
// NOTE the above bug was fixed in Sass 1.52.4 in June 2022, this workaround should
// be kept as long as we want to support earlier Sass versions
@mixin -load-css-file($file, $ignore-missing: false) {
    @if not map.get($-loaded-css-files, $file) {
        $-loaded-css-files: map.set($-loaded-css-files, $file, true) !global;
        @include css-content.output-css-file($file, $ignore-missing: $ignore-missing);
    }
}

@mixin -load-theme-css-file($theme-name, $ignore-missing: false) {
    $css-file: map.get($-theme-css-files, $theme-name);
    @if $css-file {
        @include -load-css-file($css-file);
    }
}

@function -clean-theme-name($name) {
    @if $name == null {
        @return null;
    }
    $name: string.to-lower-case($name);
    $remove-prefix: "zing-theme-";
    @if string.index($name, $remove-prefix) == 1 {
        $name: string.slice($name, string.length($remove-prefix) + 1);
    }
    @return $name;
}

@function -is-quartz($theme) {
    @return $theme and string.index(-clean-theme-name($theme), "quartz") == 1;
}

@function -clean-variable-name($name) {
    @if $name == null {
        @return null;
    }
    $name: string.to-lower-case($name);
    
    $proposed-variable-name: "--zing-#{$name}";
    @if map.has-key($-variable-param-types, $proposed-variable-name) {
        $name: $proposed-variable-name;
    }
        
    $remove-prefix: "zing-theme-";
    @if string.index($name, $remove-prefix) == 1 {
        $name: string.slice($name, string.length($remove-prefix) + 1);
    }
    @return $name;
}

@function -get-extended-theme-name($theme-params, $default) {
    $extended-theme-name: -clean-theme-name(map.get($theme-params, "extend-theme"));
    @if $extended-theme-name {
        @return $extended-theme-name;
    }
    @return $default;
}

$-theme-variables: (
    "quartz": (active-color: "color"),
    "quartz-dark": (active-color: "color"),
    "alpine": (alpine-active-color: "color"),
    "alpine-dark": (alpine-active-color: "color"),
    "balham": (balham-active-color: "color"),
    "balham-dark": (balham-active-color: "color"),
    "material": (material-primary-color: "color", material-accent-color: "color"),
);

$-theme-css-files: (
    "quartz": "zing-theme-quartz-no-font.css",
    "quartz-dark": "zing-theme-quartz-no-font.css",
    "alpine": "zing-theme-alpine-no-font.css",
    "alpine-dark": "zing-theme-alpine-no-font.css",
    "balham": "zing-theme-balham-no-font.css",
    "balham-dark": "zing-theme-balham-no-font.css",
    "material": "zing-theme-material-no-font.css",
);

$-theme-fonts: (
    "quartz": "zingGridQuartz",
    "quartz-dark": "zingGridQuartz",
    "alpine": "zingGridAlpine",
    "alpine-dark": "zingGridAlpine",
    "balham": "zingGridBalham",
    "balham-dark": "zingGridBalham",
    "material": "zingGridMaterial",
);

@function -is-provided-theme($theme-name) {
    @return map.has-key($-theme-variables, $theme-name);
}

@function -get-themes($params) {
    $themes: map.get($params, "themes");
    $themes: () !default;
    
    @if meta.type-of($themes) == string {
        $themes: ($themes,) // comma makes this a single element list
    }
    
    // treat ("alpine", "balham") as (alpine: (), "balham": ())
    @if meta.type-of($themes) == list {
        $themes-list: $themes;
        $themes: ();
        @each $theme in $themes-list {
            $themes: map.set($themes, $theme, ());
        }
    }
    
    @if map.has-key($params, "theme") {
        $theme: map.get($params, "theme");
        @if meta.type-of($theme) == list {
            @error "Expected theme to be a string, got a list (if you intend to use multiple themes, use the plural `themes` parameter)";
        }
        @else if meta.type-of($theme) != string {
            @error "Expected theme to be a string, got #{meta.inspect($theme)})";
        }
        $themes: map.set($themes, $theme, ());
    }
    
    @if list.length($themes) == 0 {
        $themes: (quartz: ());
    }

    $params: map.remove($params, "theme", "themes");

    $cleaned: ();
    @each $name, $extra-params in $themes {
        $theme-params: internal-preprocess-params(map.merge($params, $extra-params));
        $cleaned: map.set($cleaned, -clean-theme-name($name), $theme-params);
    }
    @return $cleaned;
}

// Return a version of $params with colour blending applied
@function -base-color-blends($params) {
    // Simple defaults. We need to define the defaults for any parameters
    // that are used in blending below
    $params: -param-default($params, --zing-foreground-color,            #000);
    $params: -param-default($params, --zing-background-color,            #fff);
    $params: -param-default($params, --zing-range-selection-border-color, --zing-foreground-color);

    // Blended defaults.
    $params: -param-default($params, --zing-disabled-foreground-color,          --zing-foreground-color,                 $alpha: 0.5);
    $params: -param-default($params, --zing-modal-overlay-background-color,     --zing-background-color,                 $alpha: 0.66);
    $params: -param-default($params, --zing-range-selection-background-color,   --zing-range-selection-border-color,     $alpha: 0.2);
    $params: -param-default($params, --zing-range-selection-background-color-2, --zing-range-selection-background-color, $self-overlay: 2);
    $params: -param-default($params, --zing-range-selection-background-color-3, --zing-range-selection-background-color, $self-overlay: 3);
    $params: -param-default($params, --zing-range-selection-background-color-4, --zing-range-selection-background-color, $self-overlay: 4);
    $params: -param-default($params, --zing-border-color,                       --zing-foreground-color,                 $alpha: 0.25);
    $params: -param-default($params, --zing-header-column-separator-color,      --zing-border-color,                     $alpha: 0.5);
    $params: -param-default($params, --zing-header-column-resize-handle-color,  --zing-border-color,                     $alpha: 0.5);
    $params: -param-default($params, --zing-input-disabled-border-color,        --zing-input-border-color,               $alpha: 0.3);
    @return $params;
}

@function -theme-alpine-color-blends($params) {
    // Simple defaults. We need to define the defaults for any parameters
    // that are used in blending either below or in the base color blends
    $params: -param-default($params, --zing-background-color,            #fff);
    $params: -param-default($params, --zing-foreground-color,            #181d1f);
    $params: -param-default($params, --zing-subheader-background-color,  #fff);
    $params: -param-default($params, --zing-alpine-active-color,         #2196f3);
    $params: -param-default($params, --zing-range-selection-border-color, --zing-alpine-active-color);

    // Blended defaults
    $params: -param-default($params, --zing-subheader-toolbar-background-color, --zing-subheader-background-color, $alpha: 0.5);
    $params: -param-default($params, --zing-selected-row-background-color,      --zing-alpine-active-color,        $alpha: 0.1);
    $params: -param-default($params, --zing-row-hover-color,                    --zing-alpine-active-color,        $alpha: 0.1);
    $params: -param-default($params, --zing-column-hover-color,                 --zing-alpine-active-color,        $alpha: 0.1);
    $params: -param-default($params, --zing-chip-background-color,              --zing-foreground-color,           $alpha: 0.07);
    $params: -param-default($params, --zing-input-disabled-background-color,    --zing-border-color,               $alpha: 0.15);
    $params: -param-default($params, --zing-input-disabled-border-color,        --zing-border-color,               $alpha: 0.3);
    $params: -param-default($params, --zing-disabled-foreground-color,          --zing-foreground-color,           $alpha: 0.5);
    $params: -param-default($params, --zing-input-focus-border-color,           --zing-alpine-active-color,        $alpha: 0.4);
    @return $params;
}

@function -theme-alpine-dark-color-blends($params) {
    $params: -param-default($params, --zing-background-color,           #181d1f);
    $params: -param-default($params, --zing-foreground-color,           #fff);
    $params: -param-default($params, --zing-subheader-background-color, #000);

    @return -theme-alpine-color-blends($params);
}

@function -theme-balham-color-blends($params) {
    // Simple defaults. We need to define the defaults for any parameters
    // that are used in blending either below or in the base color blends
    $params: -param-default($params, --zing-background-color,             #fff);
    $params: -param-default($params, --zing-foreground-color,             #000);
    $params: -param-default($params, --zing-border-color,                 #bdc3c7);
    $params: -param-default($params, --zing-subheader-background-color,   #e2e9eb);
    $params: -param-default($params, --zing-balham-active-color,          #0091ea);
    $params: -param-default($params, --zing-range-selection-border-color, --zing-balham-active-color);

    // Blended defaults
    $params: -param-default($params, --zing-secondary-foreground-color,         --zing-foreground-color,           $alpha: 0.54);
    $params: -param-default($params, --zing-disabled-foreground-color,          --zing-foreground-color,           $alpha: 0.38);
    $params: -param-default($params, --zing-subheader-toolbar-background-color, --zing-subheader-background-color, $alpha: 0.5);
    $params: -param-default($params, --zing-row-border-color,                   --zing-border-color,               $alpha: 0.58);
    $params: -param-default($params, --zing-chip-background-color,              --zing-foreground-color,           $alpha: 0.1);
    $params: -param-default($params, --zing-selected-row-background-color,      --zing-balham-active-color,        $alpha: 0.28);
    $params: -param-default($params, --zing-header-column-separator-color,      --zing-border-color,               $alpha: 0.5);
    @return $params;
}

@function -theme-balham-dark-color-blends($params) {
    $params: -param-default($params, --zing-background-color,           #181d1f);
    $params: -param-default($params, --zing-foreground-color,           #fff);
    $params: -param-default($params, --zing-border-color,               #424242);
    $params: -param-default($params, --zing-subheader-background-color, #000);
    $params: -param-default($params, --zing-balham-active-color,        #00B0FF);

    $params: -param-default($params, --zing-disabled-foreground-color, --zing-foreground-color, $alpha: 0.38);
    $params: -param-default($params, --zing-header-foreground-color,   --zing-foreground-color, $alpha: 0.64);

    @return  -theme-balham-color-blends($params);
}

@function -theme-material-color-blends($params) {
    // Simple defaults. We need to define the defaults for any parameters
    // that are used in blending either below or in the base color blends
    $params: -param-default($params, --zing-background-color,                  #fff);
    $params: -param-default($params, --zing-foreground-color,                  rgba(0, 0, 0, 0.87));
    $params: -param-default($params, --zing-subheader-background-color,        #eee);
    $params: -param-default($params, --zing-material-primary-color,            #3f51b5);
    $params: -param-default($params, --zing-range-selection-border-color,       --zing-material-primary-color);
    $params: -param-default($params, --zing-range-selection-background-color,  rgba(122, 134, 203, 0.1));
    $params: -param-default($params, --zing-border-color,                      #e2e2e2);

    // Blended defaults
    $params: -param-default($params, --zing-secondary-foreground-color,         --zing-foreground-color,           $alpha: 0.54);
    $params: -param-default($params, --zing-disabled-foreground-color,          --zing-foreground-color,           $alpha: 0.38);
    $params: -param-default($params, --zing-subheader-toolbar-background-color, --zing-subheader-background-color, $alpha: 0.5);
    @return $params;
}

// Apply a default value to a parameter
//  $params: -param-default($params, x, #f08) - default x to a specific color value
//  $params: -param-default($params, x, y) - default x to the value of y (if y is set)
//  $params: -param-default($params, x, y, $alpha: 0.5) - default x to the value of y made 50% transparent
@function -param-default($params, $target, $source, $alpha: null, $self-overlay: null) {
    @if string.index($target, "--zing-") != 1 {
        @error "Internal error: $target to -param-default should start --zing-";
    }
    $value: null;
    @if type-of($source) == "color" {
        $value: $source;
    } @else {
        @if string.index($source, "--zing-") != 1 {
            @error "Internal error: $source to -param-default should start --zing-";
        }
        $value: map.get($params, $source);
    }
    @if map.has-key($params, $target) or $value == null {
        @return $params;
    }
    @if $alpha != null {
        $value: color.change($value, $alpha: color.alpha($value) * $alpha);
    }
    @if $self-overlay != null {
        // this formula produces the same opacity value as overlaying the color on top
        // of itself $self-overlay times
        $value: color.change($value, $alpha: 1-(math.pow(1 - color.alpha($value), $self-overlay)));
    }
    @return map.set($params, $target, $value);
}

$-param-type-descriptions: (
    "color": "a CSS color (e.g. `red` or `#fff`)",
    "length": "a CSS length (e.g. `0`, `4px` or `50%`)",
    "border-style": "a CSS border style (e.g. `dotted` or `solid`)",
    "duration": "a number with time duration units (e.g. `3s` or `250ms`)",
    "border-style-and-size": "either `none`, or a CSS border-style and size (e.g. `solid 1px`), or a boolean (true -> `solid 1px` and false -> `none`)",
    "border-style-and-color": "a CSS border-style and color (e.g. `solid red`)",
    "display": "A CSS display value (`block` to show, `none` to hide - `true` and `false` are also accepted)",
    "any": "any value",
);

// params that are copied to --zing-param-name variables
$-variable-param-types: (
    --zing-foreground-color: "color",
    --zing-data-color: "color",
    --zing-secondary-foreground-color: "color",
    --zing-header-foreground-color: "color",
    --zing-disabled-foreground-color: "color",
    --zing-background-color: "color",
    --zing-header-background-color: "color",
    --zing-tooltip-background-color: "color",
    --zing-subheader-background-color: "color",
    --zing-subheader-toolbar-background-color: "color",
    --zing-control-panel-background-color: "color",
    --zing-side-button-selected-background-color: "color",
    --zing-selected-row-background-color: "color",
    --zing-odd-row-background-color: "color",
    --zing-modal-overlay-background-color: "color",
    --zing-row-hover-color: "color",
    --zing-column-hover-color: "color",
    --zing-range-selection-border-color: "color",
    --zing-range-selection-border-style: "border-style",
    --zing-range-selection-background-color: "color",
    --zing-range-selection-background-color-2: "color",
    --zing-range-selection-background-color-3: "color",
    --zing-range-selection-background-color-4: "color",
    --zing-range-selection-highlight-color: "color",
    --zing-selected-tab-underline-color: "color",
    --zing-selected-tab-underline-width: "length",
    --zing-selected-tab-underline-transition-speed: "duration",
    --zing-range-selection-chart-category-background-color: "color",
    --zing-range-selection-chart-background-color: "color",
    --zing-header-cell-hover-background-color: "color",
    --zing-header-cell-moving-background-color: "color",
    --zing-value-change-value-highlight-background-color: "color",
    --zing-value-change-delta-up-color: "color",
    --zing-value-change-delta-down-color: "color",
    --zing-chip-background-color: "color",
    --zing-borders: "border-style-and-size",
    --zing-border-color: "color",
    --zing-borders-critical: "border-style-and-size",
    --zing-borders-secondary: "border-style-and-size",
    --zing-secondary-border-color: "color",

    --zing-row-border-style: "border-style",
    --zing-row-border-width: "length",
    --zing-row-border-color: "color",

    --zing-cell-horizontal-border: "border-style-and-color",
    --zing-borders-input: "border-style-and-size",
    --zing-input-border-color: "color",
    --zing-borders-input-invalid: "border-style-and-size",
    --zing-input-border-color-invalid: "color",
    --zing-borders-side-button: "border-style-and-size",
    --zing-border-radius: "length",
    --zing-header-column-separator-display: "display",
    --zing-header-column-separator-height: "length",
    --zing-header-column-separator-width: "length",
    --zing-header-column-separator-color: "color",
    --zing-header-column-resize-handle-display: "display",
    --zing-header-column-resize-handle-height: "length",
    --zing-header-column-resize-handle-width: "length",
    --zing-header-column-resize-handle-color: "color",
    --zing-invalid-color: "color",
    --zing-input-disabled-border-color: "color",
    --zing-input-disabled-background-color: "color",
    --zing-checkbox-background-color: "color",
    --zing-checkbox-border-radius: "length",
    --zing-checkbox-checked-color: "color",
    --zing-checkbox-unchecked-color: "color",
    --zing-checkbox-indeterminate-color: "color",
    --zing-toggle-button-off-border-color: "color",
    --zing-toggle-button-off-background-color: "color",
    --zing-toggle-button-on-border-color: "color",
    --zing-toggle-button-on-background-color: "color",
    --zing-toggle-button-switch-background-color: "color",
    --zing-toggle-button-switch-border-color: "color",
    --zing-toggle-button-border-width: "length",
    --zing-toggle-button-height: "length",
    --zing-toggle-button-width: "length",
    --zing-input-focus-box-shadow: "any",
    --zing-input-focus-border-color: "color",
    --zing-minichart-selected-chart-color: "color",
    --zing-minichart-selected-page-color: "color",
    --zing-grid-size: "length",
    --zing-icon-size: "length",
    --zing-widget-container-horizontal-padding: "length",
    --zing-widget-container-vertical-padding: "length",
    --zing-widget-horizontal-spacing: "length",
    --zing-widget-vertical-spacing: "length",
    --zing-cell-horizontal-padding: "length",
    --zing-cell-widget-spacing: "length",
    --zing-row-height: "length",
    --zing-header-height: "length",
    --zing-list-item-height: "length",
    --zing-column-select-indent-size: "length",
    --zing-set-filter-indent-size: "length",
    --zing-advanced-filter-builder-indent-size: "length",
    --zing-row-group-indent-size: "length",
    --zing-filter-tool-panel-group-indent: "length",
    --zing-tab-min-width: "length",
    --zing-menu-min-width: "length",
    --zing-side-bar-panel-width: "length",
    --zing-font-family: "any",
    --zing-font-size: "length",
    --zing-card-radius: "length",
    --zing-card-shadow: "any",
    --zing-popup-shadow: "any",
    --zing-active-color: "color",
    --zing-alpine-active-color: "color",
    --zing-balham-active-color: "color",
    --zing-material-primary-color: "color",
    --zing-material-accent-color: "color",
    --zing-icon-font-family: "any"
);

@each $icon-name in map.keys($icon-font-codes) {
    $-variable-param-types: map.set($-variable-param-types, "--zing-icon-font-code-#{$icon-name}", "any");
}

// params that are not copied to CSS variables
$-non-variable-param-types: (
    suppress-native-widget-styling: "bool",
    extend-theme: "string"
);

// Apply Sass API sugar over CSS variable API
@function internal-preprocess-params($params) {
    $processed: ();
    @each $name, $value in $params {
        $name: -clean-variable-name($name);
        $type: map.get($-variable-param-types, $name);
        // Allow `null` for colours
        @if $type == "color" and $value == null {
            $value: transparent;
        }
        // Allow booleans for borders params
        @if string.index($name, "borders") and $value == true {
            $value: solid 1px;
        }
        @if string.index($name, "borders") and $value == false {
            $value: none;
        }
        // Allow booleans for display params
        @if $type == "display" and not $value {
            $value: none;
        }
        @if $type == "display" and $value == true {
            $value: block;
        }
        $processed: map.set($processed, $name, $value);
    }
    @return $processed;
}

@mixin -validate-params($params, $theme: null) {
    $error: internal-get-params-error($params, $theme);
    @if $error {
        @error $error;
    }
}

@function internal-get-params-error($params, $theme: null) {
    $theme-variables: ();
    @if $theme and map.has-key($-theme-variables, $theme) {
        $theme-variables: map.get($-theme-variables, $theme);
    }

    $param-types: map.merge($-variable-param-types, $theme-variables);
    $errors: ();
    @each $name, $value in $params {

        @if $name == "suppress-native-widget-styling" {
            $errors: list.append($errors, "suppress-native-widget-styling can not be specified at the theme level, only at the top level");
        }

        @if -is-runtime-expression($value) {
            // You can pass variable expressions as values and we'll just trust
            // that it's an appropriate value because we can't check at compile time
        } @else {
            $expected-type: map.get($param-types, $name);
            @if $expected-type {
                $is-valid: -validate-value($value, $expected-type);

                @if not $is-valid {
                    $expected: map.get($-param-type-descriptions, $expected-type);
                    $expected: $expected-type !default;
                    $errors: list.append($errors, "Invalid parameter `#{$name}: #{meta.inspect($value)}` (expected #{$expected})");
                }
            } @else if not map.has-key($-non-variable-param-types, $name) {
                $errors: list.append($errors, "Unrecognised parameter '#{$name}'");
            }
        }
    }
    @if list.length($errors) > 0 {
        $message: "";
        @each $error in $errors {
            @if $message == "" {
                $message: $error;
            }
            @else {
                $message: "#{$message}; #{$error}";
            }
        }
        @if list.length($errors) > 1 {
            $message: "#{list.length($errors)} errors in #{$theme} parameters: #{$message}";
        }
        @else {
            $message: "Error in #{$theme} parameters: #{$message}";
        }
        @return $message;
    }
    @return null;
}

@function -validate-value($value, $expected-type) {
    $validator-name: "-validate-#{$expected-type}";
    $validator: meta.get-function($validator-name);
    @if not $validator {
        @error "Internal error: no validator function #{$validator-name}";
    }
    @return meta.call($validator, $value);
}

@function -is-runtime-expression($value) {
    $value: string.to-lower-case(meta.inspect($value));
    @return string.index($value, "var(") != null or string.index($value, "calc(") != null;
}

@function -validate-color($value) {
    @return meta.type-of($value) == "color";
}

@function -validate-length($value) {
    @return meta.type-of($value) == "number" and (unit($value) != "" or $value == 0);
}

$border-styles: (none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset, initial);
@function -validate-border-style($value) {
    $value-preserve-quotes: meta.inspect($value);
    @return list.index($border-styles, $value-preserve-quotes) != null;
}

@function -validate-duration($value) {
    @return meta.type-of($value) == "number" and (unit($value) == "s" or unit($value) == "ms" or $value == 0);
}

@function -validate-display($value) {
    @return $value == block or $value == none;
}

@function -validate-border-style-and-size($value) {
    @return -validate-two-in-any-order($value, "border-style", "length");
}

@function -validate-border-style-and-color($value) {
    @return -validate-two-in-any-order($value, "border-style", "color");
}

@function -validate-bool($value) {
    @return meta.type-of($value) == "bool";
}

@function -validate-string($value) {
    @return meta.type-of($value) == "string";
}

@function -validate-any($value) {
    @return true;
}

@function -validate-two-in-any-order($value, $type-a, $type-b) {
    @if meta.type-of($value) == "string" and $value == "none" {
        @return true;
    }

    @if meta.type-of($value) != "list" or list.length($value) != 2 {
        @return false;
    }

    $value-1: list.nth($value, 1);
    $value-2: list.nth($value, 2);
    @return (
        (-validate-value($value-1, $type-a) and -validate-value($value-2, $type-b))
        or
        (-validate-value($value-2, $type-a) and -validate-value($value-1, $type-b))
    );
}

// check that we defined all the validator functions
@each $variable-name, $type in $-variable-param-types {
    @if not map.has-key($-param-type-descriptions, $type) {
        @error "Internal error: missing type description for #{$type} (used on #{$variable-name})";
    }
    @if not meta.function-exists("-validate-#{$type}") {
        @error "Internal error: missing validator function for #{$type} (used on #{$variable-name})";
    }
}